/* Generated By:JavaCC: Do not edit this line. GrammarParser.java */
package minjavac.tableParser.grammar;

import java.util.LinkedList;
import java.util.List;

public class GrammarParser implements GrammarParserConstants {
  private boolean firstRule;
  private String firstSymbol;
  private List<Rule> grammar;

  public List<Rule> parse() throws ParseException {
    firstRule = true;
    grammar = new LinkedList<Rule>();

    while (true) {
      rule();
      match(EOR);
      if (lookahead(EOF)) break;
    }

    match(EOF);

    return grammar;
  }

  public void rule() throws ParseException {
    match(ID);
    String lhs = token.image;

    if (firstRule) {
      firstRule = false;
      firstSymbol = removeBrackets(lhs);
    }

    match(ASSIGN);
    rightHandSide(lhs);
  }

  public void rightHandSide(String lhs) throws ParseException {
    String nlhs = lhs;

    while (true) {
      if (lookahead(LAMBDA)) {
        match(LAMBDA);
        addRule(new Rule(lhs));
      }
      else {
        List<String> rhs = new LinkedList<String>();

        while (true) {
          if (lookahead(ID)) {
            match(ID);
            rhs.add(token.image);
          }
          else if (lookahead(LPARENS)) {
            nlhs = addPrefix(nlhs);

            match(LPARENS);
            rightHandSide(nlhs);
            match(RPARENS);

            if (lookahead(STAR)) {
              match(STAR);

              boolean has_lambda = false;

              for (Rule r : getMatchingRules(nlhs))
                if (r.isLambda())
                  has_lambda = true;
                else
                  r.getRhs().add(removeBrackets(nlhs));

              if (!has_lambda)
                addRule(new Rule(nlhs, lambdaRhs()));
            }

            rhs.add(nlhs);
          }
          else if (lookahead(LBRACKET)) {
            nlhs = addPrefix(nlhs);

            match(LBRACKET);
            rightHandSide(nlhs);
            match(RBRACKET);

            addRule(new Rule(nlhs, lambdaRhs()));
            rhs.add(nlhs);
          }
          else {
            break;
          }
        }

        addRule(new Rule(lhs, rhs));
      }

      if (lookahead(CHOICE))
        match(CHOICE);
      else
        break;
    }
  }

  public String getFirstSymbol() {
    return firstSymbol;
  }

  private String addPrefix(String s) {
    return "<" + "@" + s.substring(1);
  }

  private void addRule(Rule r) {
    if (grammar.isEmpty()) {
      grammar.add(r);
      return;
    }

    String lhs = r.getLhs();
    int i = grammar.size()-1;

    while (i >= 0) {
      Rule _r = grammar.get(i--);
      if (!_r.getLhs().endsWith(lhs)) break;
    }

    grammar.add(i+1, r);
  }

  private String removeBrackets(String s) {
    if (s.startsWith("<"))
      return s.substring(1, s.length()-1);
    else
      return s;
  }

  private List<String> lambdaRhs() {
    return new LinkedList<String>();
  }

  private List<Rule> getMatchingRules(String lhs) {
    lhs = removeBrackets(lhs);
    List<Rule> l = new LinkedList<Rule>();

    for (Rule r : grammar)
      if (r.getLhs().equals(lhs))
        l.add(r);

    return l;
  }

  private void match(int tok) throws ParseException {
    getNextToken();

    if (token.kind != tok)
      throw new ParseException("Parse error: "
           + "unexpected " + token.image +
             ", expected " + GrammarParserConstants.tokenImage[tok]);
  }

  private boolean lookahead(int tok) throws ParseException {
    return getToken(1).kind == tok;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GrammarParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }

  /** Constructor with InputStream. */
  public GrammarParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GrammarParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GrammarParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammarParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GrammarParser(GrammarParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GrammarParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
